name: Regression Test

on:
  workflow_call:
    inputs:
      hardhat-ref:
        required: true
        type: string
        default: 'v-next'
      edr-ref:
        required: false
        type: string
        default: ''
      repositories:
        required: false
        type: string
        default: '["Elytro-eth/soul-wallet-contract", "foundry-rs/forge-std", "kalidao/keep", "mds1/multicall", "pancakeswap/infinity-core", "PaulRBerg/prb-math", "PaulRBerg/prb-proxy", "PaulRBerg/prb-test", "pcaversaccio/createx", "ProjectOpenSea/seaport", "sablier-labs/lockup", "sablier-labs/v2-periphery", "transmissions11/solmate", "Uniswap/UniswapX", "Vectorized/solady"]'
      runners:
        required: false
        type: string
        default: '["ubuntu-latest"]'
      commands:
        required: false
        type: string
        default: '["hardhat compile", "hardhat test solidity"]'
  workflow_dispatch:
    inputs:
      hardhat-ref:
        required: true
        type: string
        default: 'v-next'
      edr-ref:
        required: false
        type: string
        default: ''
      repositories:
        required: false
        type: string
        default: '["Elytro-eth/soul-wallet-contract", "foundry-rs/forge-std", "kalidao/keep", "mds1/multicall", "pancakeswap/infinity-core", "PaulRBerg/prb-math", "PaulRBerg/prb-proxy", "PaulRBerg/prb-test", "pcaversaccio/createx", "ProjectOpenSea/seaport", "sablier-labs/lockup", "sablier-labs/v2-periphery", "transmissions11/solmate", "Uniswap/UniswapX", "Vectorized/solady"]'
      runners:
        required: false
        type: string
        default: '["ubuntu-latest"]'
      commands:
        required: false
        type: string
        default: '["hardhat compile", "hardhat test solidity"]'

defaults:
  run:
    shell: bash

jobs:
  build-edr:
    name: Build EDR
    if: inputs.edr-ref
    runs-on: ${{ matrix.context.host }}
    strategy:
      fail-fast: false
      matrix:
        context:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - host: macos-latest
            target: aarch64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
    defaults:
      run:
        working-directory: crates/edr_napi
    steps:
      - uses: actions/checkout@v4
        with:
          repository: NomicFoundation/edr
          ref: ${{ inputs.edr-ref }}
      - uses: ./.github/actions/setup-node
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Add Rust cross-compilation target
        run: rustup target add ${{ matrix.context.target }}
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline
      - name: Build
        run: |
          pnpm build --target ${{ matrix.context.target }}
          strip *.node
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: edr-${{ matrix.context.runner }}
          path: crates/edr_napi/edr.*.node
          if-no-files-found: error

  publish-edr:
    name: Publish EDR
    needs: [build-edr]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: crates/edr_napi
    steps:
      - uses: actions/checkout@v4
        with:
          repository: NomicFoundation/edr
          ref: ${{ inputs.edr-ref }}
      - uses: ./.github/actions/setup-node
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: crates/edr_napi/artifacts
      - name: Install sponge
        run: |
          sudo apt-get update
          sudo apt-get install -y moreutils
      - name: Move artifacts
        run: pnpm artifacts
      - name: Create the package
        run: pnpm pack
      - name: Upload the package
        uses: actions/upload-artifact@v4
        with:
          name: edr
          path: crates/edr_napi/edr.*.tgz
          if-no-files-found: error

  build-and-publish-hardhat:
    name: Build and publish Hardhat
    needs: [publish-edr]
    if: (!cancelled() && inputs.hardhat-ref != 'next' && !startsWith(inputs.hardhat-ref, '3') && inputs.edr-ref == '' || needs.publish-edr.result == 'success')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: v-next/hardhat
    steps:
      - uses: actions/checkout@v4
        with:
          repository: NomicFoundation/hardhat
          ref: ${{ inputs.hardhat-ref }}
      - uses: ./.github/actions/setup-env
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline
      - name: Download EDR
        if: inputs.edr-ref != ''
        uses: actions/download-artifact@v4
        with:
          name: edr
          path: v-next/hardhat
      - name: Install EDR
        if: inputs.edr-ref != ''
        run: |
          pnpm install edr.*.tgz --save-dev
          rm edr.*.tgz
      - name: Build
        run: pnpm build
      - name: Modify package.json
        env:
          JSON: |
            {
              "bundleDependencies": true
            }
        run: jq --argjson json "$JSON" '. + $json' package.json > package.json.tmp && mv package.json.tmp package.json
      - name: Modify top-level package.json
        env:
          JSON: |
            {
              "pnpm": {
                "supportedArchitectures": {
                  "os": ["win32", "darwin", "linux"],
                  "cpu": ["x64", "arm64"]
                }
              }
            }
        run: jq --argjson json "$JSON" '. + $json' package.json > package.json.tmp && mv package.json.tmp package.json
        working-directory: ${{ github.workspace }}
      - name: Deploy
        run: |
          pnpm deploy --config.node-linker=hoisted --filter=hardhat --prod bundle.tmp
          rsync -a --copy-links bundle.tmp/ bundle
          rm -rf **/bundle.tmp
        working-directory: ${{ github.workspace }}
      - name: Pack
        run: npm pack
        working-directory: bundle
      - uses: actions/upload-artifact@v4
        with:
          name: hardhat
          path: bundle/hardhat-*.tgz
          if-no-files-found: error

  test:
    name: Run the test command
    needs: [build-and-publish-hardhat]
    if: (!cancelled() && (inputs.hardhat-ref == 'next' || startsWith(inputs.hardhat-ref, '3')) || needs.build-and-publish-hardhat.result == 'success')
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        repository: ${{ fromJSON(inputs.repositories) }}
        runner: ${{ fromJSON(inputs.runners) }}
        command: ${{ fromJSON(inputs.commands) }}
        config:
          - repositories:
              Elytro-eth/soul-wallet-contract:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "contracts",
                      "tests": {
                        "solidity": "test"
                      }
                    },
                    "solidity": {
                      "version": "0.8.24",
                      "remappings": [
                        "@soulwallet-core/=lib/soulwallet-core/",
                        "@source/=contracts/",
                        "@arbitrum/nitro-contracts=lib/nitro-contracts/",
                        "@solady=lib/solady/",
                        "@solenv=lib/solenv/src/",
                        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
                        "@account-abstraction/=lib/account-abstraction/",
                        "@crypto-lib/=lib/crypto-lib/src/",
                        "forge-std/=lib/forge-std/src/",
                        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/"
                      ],
                      "settings": {
                        "viaIR": true,
                        "optimizer": {
                          "enabled": true,
                          "runs": 100000
                        },
                        "evmVersion": "cancun",
                        "metadata": {
                          "bytecodeHash": "none",
                          "appendCBOR": false
                        }
                      }
                    },
                    "solidityTest": {
                      "testFail": true,
                      "rpcEndpoints": {
                        "goerli": "${GOERLI_RPC_URL}",
                        "arbitrumgoerli": "${ARBITRUM_GOERLI_RPC_URL}",
                        "optimismgoerli": "${OPTIMISM_GOERLI_RPC_URL}",
                        "etherum": "${ETHERUM_RPC_URL}",
                        "arbitrum": "${ARBITRUM_RPC_URL}",
                        "optimism": "${OPTIMISM_RPC_URL}",
                        "scrollsepolia": "${SCROLL_SEPOLIA_RPC_URL}",
                        "basesepolia": "${BASE_SEPOLIA_RPC_URL}"
                      }
                    }
                  };
                ignore: |
                  # unknown cheatcode with selector 0xce817d47
                  test/hooks/2fa/Crypto2FAHook.t.sol
                  test/automation/ClaimInterest.t.sol
                  test/modules/socialRecovery/SocialRecoveryModule.t.sol

                  # unknown cheatcode with selector 0xf0259e92
                  test/paymaster/ERC20Paymaster.t.sol
                ref: fc7cc084563ad1bda870df841b77caa9ee3a3661
              PaulRBerg/prb-math:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "src",
                      "tests": {
                        "solidity": "test"
                      }
                    },
                    "solidity": {
                      "version": "0.8.26",
                      "settings": {
                        "optimizer": {
                          "enabled": true,
                          "runs": 1000000
                        },
                        "evmVersion": "shanghai"
                      }
                    },
                    "solidityTest": {
                      "fuzz": {
                        "runs": 256
                      }
                    }
                  };
                ref: 93be53541f39a0c1e80818a9183b2acb3908ae74
              PaulRBerg/prb-proxy:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "src",
                      "tests": {
                        "solidity": "test"
                      }
                    },
                    "solidity": {
                      "version": "0.8.23",
                      "settings": {
                        "optimizer": {
                          "enabled": true,
                          "runs": 200
                        },
                        "evmVersion": "paris",
                        "metadata": {
                          "bytecodeHash": "none",
                          "appendCBOR": false
                        }
                      }
                    },
                    "solidityTest": {
                      "fuzz": {
                        "runs": 1000,
                        "maxTestRejects": 1000000
                      },
                      "fsPermissions": {
                        "read": [
                          "./out-optimized"
                        ]
                      },
                      "rpcEndpoints": {
                        "arbitrum": "https://arbitrum-mainnet.infura.io/v3/${API_KEY_INFURA}",
                        "avalanche": "https://avalanche-mainnet.infura.io/v3/${API_KEY_INFURA}",
                        "bnb_smart_chain": "https://bsc-dataseed.binance.org",
                        "gnosis_chain": "https://rpc.gnosischain.com",
                        "goerli": "https://goerli.infura.io/v3/${API_KEY_INFURA}",
                        "localhost": "http://localhost:8545",
                        "mainnet": "https://eth-mainnet.g.alchemy.com/v2/${API_KEY_ALCHEMY}",
                        "optimism": "https://optimism-mainnet.infura.io/v3/${API_KEY_INFURA}",
                        "polygon": "https://polygon-mainnet.infura.io/v3/${API_KEY_INFURA}",
                        "sepolia": "https://sepolia.infura.io/v3/${API_KEY_INFURA}"
                      }
                    }
                  };
                ref: e45f5325d4b6003227a6c4bdaefac9453f89de2e
              PaulRBerg/prb-test:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "src",
                      "tests": {
                        "solidity": "test"
                      }
                    },
                    "solidity": {
                      "version": "0.8.26",
                      "settings": {
                        "optimizer": {
                          "enabled": false
                        },
                        "evmVersion": "shanghai"
                      }
                    },
                    "solidityTest": {
                      "fuzz": {
                        "runs": 100,
                        "maxTestRejects": 100000
                      }
                    }
                  };
                ref: cd07166bdd12c7c4a899cb53951653b53939a644
              ProjectOpenSea/seaport:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "contracts",
                      "tests": {
                        "solidity": "test/foundry"
                      }
                    },
                    "solidity": {
                      "version": "0.8.24",
                      "remappings": [
                        "@rari-capital/solmate/=lib/solmate/",
                        "ds-test/=lib/ds-test/src/",
                        "forge-std/=lib/forge-std/src/",
                        "murky/=lib/murky/src/",
                        "@openzeppelin/=lib/openzeppelin-contracts/",
                        "solarray/=lib/solarray/src/",
                        "solady/=lib/solady/",
                        "seaport-sol/=lib/seaport-sol/",
                        "seaport-types/=lib/seaport-types/",
                        "seaport-core/=lib/seaport-core/",
                        "seaport/=contracts/"
                      ],
                      "settings": {
                        "evmVersion": "cancun",
                        "optimizer": {
                          "runs": 4294967292
                        }
                      }
                    },
                    "solidityTest": {
                      "fuzz": {
                        "runs": 1000
                      },
                      "fsPermissions": {
                        "read": [
                          "./optimized-out",
                          "./reference-out"
                        ],
                        "write": [
                          "./call-metrics.txt",
                          "./mutation-metrics.txt",
                          "./assume-metrics.txt",
                          "./fuzz_debug.json"
                        ]
                      }
                    }
                  };
                ignore: |
                  # Invalid hex bytecode for contract
                  test/foundry
                ref: 585b2ef8376dd979171522027bbdb048c2a4999c
              Uniswap/UniswapX:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "src",
                      "tests": {
                        "solidity": "test"
                      }
                    },
                    "solidity": {
                      "version": "0.8.24",
                      "remappings": [
                        "ds-test/=lib/forge-std/lib/ds-test/src/",
                        "forge-gas-snapshot/=lib/forge-gas-snapshot/src/",
                        "forge-std/=lib/forge-std/src/",
                        "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
                        "permit2/=lib/permit2/",
                        "solmate/=lib/solmate/",
                        "solarray/=lib/solarray/src/"
                      ],
                      "settings": {
                        "optimizer": {
                          "runs": 1000000
                        }
                      }
                    },
                    "solidityTest": {
                      "ffi": true,
                      "fsPermissions": {
                        "readWrite": [
                          ".forge-snapshots/"
                        ]
                      }
                    }
                  };
                ignore: |
                  */integration/*

                  # unknown cheatcode with selector 0x7fb5297f
                  test/script/DeployDutch.t.sol
                  test/script/DeployExclusiveDutch.t.sol
                  test/script/DeployPriorityOrderReactor.t.sol

                  # unknown cheatcode with selector 0x3cad9d7b
                  test/base/EthOutput.t.sol
                  test/validation-contracts/ExclusiveFillerValidation.t.sol
                  test/lib/NonLinearDutchDecayLib.t.sol
                  test/base/ProtocolFees.t.sol
                  test/fill-macros/DirectTakerFillMacro.t.sol
                  test/executors/SwapRouter02Executor.t.sol

                  # unknown cheatcode with selector 0xdd9fca12
                  test/base/BaseReactor.t.sol
                  test/reactors/PriorityOrderReactor.t.sol
                  test/reactors/V3DutchOrderReactor.t.sol
                  test/reactors/V2DutchOrderReactor.t.sol
                  test/reactors/LimitOrderReactor.t.sol
                  test/reactors/BaseDutchOrderReactor.t.sol
                  test/reactors/ExclusiveDutchOrderReactor.t.sol
                  test/reactors/DutchOrderReactor.t.sol
                ref: 4013dfa4bc53b823b406b035a9b5eb579607eb99
              Vectorized/solady:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "src",
                      "tests": {
                        "solidity": "test"
                      }
                    },
                    "solidity": {
                      "version": "0.8.28",
                      "remappings": [
                        "forge-std=test/utils/forge-std/"
                      ],
                      "settings": {
                        "optimizer": {
                          "enabled": true,
                          "runs": 1000
                        },
                        "evmVersion": "cancun"
                      }
                    },
                    "solidityTest": {
                      "blockGasLimit": BigInt(100000000),
                      "fsPermissions": {
                        "read": [
                          "./test/data"
                        ]
                      },
                      "fuzz": {
                        "runs": 256
                      },
                      "invariant": {
                        "depth": 15,
                        "runs": 10
                      }
                    }
                  };
                ignore: |
                  */*7702*
                  */*Transient*
                  */ext/ithaca/*
                  */ext/zksync/*

                  # testP256Normalized(uint256,bytes32): unknown cheatcode with selector 0xc453949e
                  test/P256.t.sol
                  test/WebAuthn.t.sol

                  # testBumpSlot(bytes32,uint256)
                  test/LibStorage.t.sol

                  # testTargetGenerate(): EvmError: Revert
                  test/DeploylessPredeployQueryer.t.sol
                ref: c9e079c0ca836dcc52777a1fa7227ef28e3537b3
              foundry-rs/forge-std:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "src",
                      "tests": {
                        "solidity": "test"
                      }
                    },
                    "solidity": {
                      "version": "0.8.26",
                      "settings": {
                        "optimizer": {
                          "enabled": true,
                          "runs": 200
                        }
                      }
                    },
                    "solidityTest": {
                      "fsPermissions": {
                        "readWrite": [
                          "./"
                        ]
                      },
                      "rpcEndpoints": {
                        "mainnet": "https://eth-mainnet.alchemyapi.io/v2/WV407BEiBmjNJfKo9Uo_55u0z0ITyCOX",
                        "optimism_sepolia": "https://sepolia.optimism.io/",
                        "arbitrum_one_sepolia": "https://sepolia-rollup.arbitrum.io/rpc/",
                        "needs_undefined_env_var": "${UNDEFINED_RPC_URL_PLACEHOLDER}"
                      }
                    }
                  };
                ignore: |
                  # test_DeriveRememberKey(): unknown cheatcode with selector 0x6229498b; you may have a mismatch between the `Vm` interface (likely in `forge-std`) and the `edr_solidity_tests` version
                  test/StdCheats.t.sol
                  # StdUtilsForkTest.setUp(): Could not instantiate forked environment. Fork host: 'eth-mainnet.alchemyapi.io'
                  test/StdUtils.t.sol
                  # test_RevertIf_ChainBubbleUp(): call did not revert as expected
                  # test_ChainRpcInitialization(): assertion failed: https://eth-mainnet.alchemyapi.io/v2/WV407BEiBmjNJfKo9Uo_55u0z0ITyCOX != https://eth.merkle.io
                  test/StdChains.t.sol
                ref: 8ba9031ffcbe25aa0d1224d3ca263a995026e477
              kalidao/keep:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "contracts",
                      "tests": {
                        "solidity": "test"
                      }
                    },
                    "solidity": {
                      "version": "0.8.18",
                      "remappings": [
                        "@std/=lib/forge-std/src/",
                        "@solady/=lib/solady/",
                        "ds-test/=lib/forge-std/lib/ds-test/src/",
                        "forge-std/=lib/forge-std/src/"
                      ],
                      "settings": {
                        "optimizer": {
                          "runs": 9999999
                        }
                      }
                    },
                    "solidityTest": {
                      "testFail": true
                    }
                  };
                ref: 21213d34042b8a5a68afeb590f43018f08c81a58
              mds1/multicall:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "src"
                    },
                    "solidity": {
                      "version": "0.8.12",
                      "settings": {
                        "optimizer": {
                          "enabled": true,
                          "runs": 10000000
                        }
                      },
                      "remappings": [
                        "forge-std/=lib/forge-std/src/",
                        "ds-test/=lib/forge-std/lib/ds-test/src/"
                      ]
                    },
                    "solidityTest": {
                      "fuzz": {
                        "runs": 1000
                      }
                    }
                  };
                ref: 19da7a56668b7b284901ef0551edb23905c6cd53
              pancakeswap/infinity-core:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "src",
                      "tests": {
                        "solidity": "test"
                      }
                    },
                    "solidity": {
                      "version": "0.8.26",
                      "remappings": [
                        "ds-test/=lib/forge-std/lib/ds-test/src/",
                        "forge-std/=lib/forge-std/src/",
                        "@openzeppelin/=lib/openzeppelin-contracts/",
                        "solmate/=lib/solmate/",
                        "forge-gas-snapshot/=lib/forge-gas-snapshot/src/"
                      ],
                      "settings": {
                        "viaIR": true,
                        "optimizer": {
                          "runs": 25666
                        },
                        "evmVersion": "cancun",
                        "metadata": {
                          "bytecodeHash": "none"
                        }
                      }
                    },
                    "solidityTest": {
                      "testFail": true,
                      "ffi": true,
                      "fsPermissions": {
                        "readWrite": [
                          ".forge-snapshots/"
                        ],
                        "read": [
                          "./foundry-out",
                          "./script/config",
                          "./test/pool-cl/bin",
                          "./test/pool-bin/bin"
                        ]
                      },
                      "blockGasLimit": BigInt(300000000),
                      "fuzz": {
                        "runs": 5
                      }
                    }
                  };
                ignore: |
                  # TokenLocker.setUp(): EvmError: Revert
                  test/vault/VaultReentrancy.t.sol

                  # VaultTest.testVault_clear_successWithZeroExistingDelta(): EvmError: Revert
                  # VaultTest.testVault_clear_successWithNonZeroExistingDelta(): EvmError: Revert
                  test/vault/Vault.t.sol

                  # TickMathTestTest.test_getTickAtSqrtRatio_matchesJavascriptImplWithin1(): EvmError: Revert
                  # TickMathTestTest.test_getSqrtRatioAtTick_matchesJavaScriptImplByOneHundrethOfABip(): EvmError: Revert
                  test/pool-cl/libraries/TickMath.t.sol

                  # unknown cheatcode with selector 0x3cad9d7b
                  test/pool-cl/libraries/BitMath.t.sol
                  test/pool-cl/libraries/CLPosition.t.sol
                  test/pool-cl/libraries/LiquidityMath.t.sol
                  test/pool-cl/libraries/SqrtPriceMath.t.sol
                  test/pool-cl/libraries/SwapMath.t.sol
                  test/pool-cl/libraries/Tick.t.sol

                  # unknown cheatcode with selector 0x51db805a
                  test/pool-bin/BinPoolManager.t.sol
                  test/pool-cl/CLPoolManager.t.sol
                  test/vault/Vault.t.sol

                  # unknown cheatcode with selector 0xdd9fca12
                  test/Extsload.t.sol
                  test/pool-bin/BinCustomCurveHook.t.sol
                  test/pool-bin/BinHook.t.sol
                  test/pool-bin/BinMintBurnFeeHook.t.sol
                  test/pool-bin/BinPoolManager.t.sol
                  test/pool-bin/libraries/BinPoolSwap.t.sol
                  test/pool-cl/CLCustomCurveHook.t.sol
                  test/pool-cl/CLMintBurnFeeHook.t.sol
                  test/pool-cl/CLPoolManager.t.sol
                  test/pool-cl/libraries/TickBitmap.t.sol
                  test/vault/Vault.t.sol
                ref: 9a050c44cdf801fd19753409e6a03a8026a1fd09
              pcaversaccio/createx:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "src",
                      "tests": {
                        "solidity": "test"
                      }
                    },
                    "solidity": {
                      "version": "0.8.23",
                      "remappings": [
                        "solady/=lib/solady/src/",
                        "forge-std/=lib/forge-std/src/",
                        "openzeppelin/=lib/openzeppelin-contracts/contracts/"
                      ],
                      "settings": {
                        "optimizer": {
                          "enabled": true,
                          "runs": 10000000
                        },
                        "viaIR": false,
                        "evmVersion": "paris",
                        "metadata": {
                          "bytecodeHash": "none"
                        }
                      }
                    },
                    "solidityTest": {
                      "fuzz": {
                        "runs": 100
                      },
                      "fsPermissions": {
                        "readWrite": [
                          "./"
                        ]
                      },
                      "invariant": {
                        "runs": 256,
                        "depth": 15
                      }
                    }
                  };
                ignore: |
                  # unknown cheatcode with selector 0x9cd23835
                  test/public/CREATE2/CreateX.deployCreate2AndInit_4Args_CustomiseSalt.t.sol
                  test/public/CREATE2/CreateX.deployCreate2AndInit_4Args_CustomiseSalt.t.sol
                  test/public/CREATE2/CreateX.deployCreate2AndInit_5Args.t.sol
                  test/public/CREATE2/CreateX.deployCreate2AndInit_5Args.t.sol
                  test/public/CREATE2/CreateX.deployCreate2Clone_3Args.t.sol
                  test/public/CREATE3/CreateX.deployCreate3AndInit_4Args_CustomiseRefundAddress.t.sol
                  test/public/CREATE3/CreateX.deployCreate3AndInit_4Args_CustomiseRefundAddress.t.sol
                  test/public/CREATE2/CreateX.deployCreate2_2Args.t.sol
                  test/public/CREATE3/CreateX.deployCreate3AndInit_3Args.t.sol
                  test/public/CREATE3/CreateX.deployCreate3AndInit_3Args.t.sol
                  test/public/CREATE3/CreateX.deployCreate3_2Args.t.sol
                  test/public/CREATE3/CreateX.deployCreate3AndInit_5Args.t.sol
                  test/public/CREATE3/CreateX.deployCreate3AndInit_5Args.t.sol
                  test/public/CREATE3/CreateX.deployCreate3_1Arg.t.sol
                  test/public/CREATE3/CreateX.deployCreate3AndInit_4Args_CustomiseSalt.t.sol
                  test/public/CREATE3/CreateX.deployCreate3AndInit_4Args_CustomiseSalt.t.sol
                  test/internal/CreateX._generateSalt.t.sol
                ref: ac7e49b93030145a646c6cffd62a81f447422309
              sablier-labs/lockup:
                env: |
                  RPC_URL_MAINNET="https://eth-mainnet.g.alchemy.com/v2/<api-key>"
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "src",
                      "tests": {
                        "solidity": "tests/unit/fuzz"
                      }
                    },
                    "solidity": {
                      "version": "0.8.26",
                      "remappings": [
                        "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
                        "@prb/math/=node_modules/@prb/math/",
                        "forge-std/=node_modules/forge-std/",
                        "solady/=node_modules/solady/",
                        "solarray/=node_modules/solarray/"
                      ],
                      "settings": {
                        "optimizer": {
                          "enabled": true,
                          "runs": 570
                        },
                        "evmVersion": "shanghai",
                        "metadata": {
                          "bytecodeHash": "none"
                        }
                      }
                    },
                    "solidityTest": {
                      "fsPermissions": {
                        "read": [
                          "./out-optimized",
                          "package.json"
                        ],
                        "readWrite": [
                          "./benchmark/results",
                          "./script/"
                        ]
                      },
                      "blockGasLimit": BigInt(9223372036854775807),
                      "fuzz": {
                        "runs": 50,
                        "maxTestRejects": 1000000
                      },
                      "invariant": {
                        "runs": 20,
                        "depth": 20,
                        "failOnRevert": true,
                        "callOverride": false
                      },
                      "sender": "0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38",
                      "rpcEndpoints": {
                        "arbitrum": "${ARBITRUM_RPC_URL}",
                        "arbitrum_sepolia": "https://arbitrum-sepolia-rpc.publicnode.com",
                        "avalanche": "${AVALANCHE_RPC_URL}",
                        "base": "https://mainnet.base.org",
                        "base_sepolia": "https://sepolia.base.org",
                        "berachain_artio": "https://bartio.rpc.berachain.com/",
                        "blast": "https://rpc.blast.io",
                        "blast_sepolia": "https://sepolia.blast.io",
                        "bnb": "https://bsc-dataseed.binance.org",
                        "core_dao": "https://rpc.coredao.org",
                        "gnosis": "https://rpc.gnosischain.com",
                        "lightlink": "https://replicator.phoenix.lightlink.io/rpc/v1",
                        "linea": "https://rpc.linea.build",
                        "linea_sepolia": "https://rpc.sepolia.linea.build",
                        "localhost": "http://localhost:8545",
                        "mainnet": "${MAINNET_RPC_URL}",
                        "mode": "https://mainnet.mode.network/",
                        "mode_sepolia": "https://sepolia.mode.network/",
                        "morph": "https://rpc.morphl2.io",
                        "optimism": "${OPTIMISM_RPC_URL}",
                        "optimism_sepolia": "https://sepolia.optimism.io",
                        "polygon": "${POLYGON_RPC_URL}",
                        "scroll": "https://rpc.scroll.io/",
                        "sei": "https://evm-rpc.sei-apis.com",
                        "sei_testnet": "https://evm-rpc.arctic-1.seinetwork.io",
                        "sepolia": "${SEPOLIA_RPC_URL}",
                        "superseed": "https://mainnet.superseed.xyz",
                        "superseed_sepolia": "https://sepolia.superseed.xyz",
                        "taiko_hekla": "https://rpc.hekla.taiko.xyz",
                        "taiko_mainnet": "https://rpc.mainnet.taiko.xyz"
                      }
                    }
                  };
                ignore: |
                  # Invalid hex bytecode for contract
                  tests
                ref: a8528a6d0ca25f4f36eb9327fc87e08dc78ad0a6
              sablier-labs/v2-periphery:
                env: |
                  RPC_URL_MAINNET="https://eth-mainnet.g.alchemy.com/v2/<api-key>"
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "src",
                      "tests": {
                        "solidity": "test"
                      }
                    },
                    "solidity": {
                      "version": "0.8.26",
                      "remappings": [
                        "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
                        "@prb/math/=node_modules/@prb/math/",
                        "@sablier/v2-core/=node_modules/@sablier/v2-core/",
                        "forge-std/=node_modules/forge-std/",
                        "solady/=node_modules/solady/"
                      ],
                      "settings": {
                        "optimizer": {
                          "enabled": true,
                          "runs": 10000
                        },
                        "evmVersion": "shanghai",
                        "metadata": {
                          "bytecodeHash": "none"
                        }
                      }
                    },
                    "solidityTest": {
                      "blockTimestamp": BigInt(1714518000),
                      "fsPermissions": {
                        "read": [
                          "./out-optimized",
                          "package.json"
                        ],
                        "readWrite": [
                          "./benchmark/results",
                          "./cache"
                        ]
                      },
                      "blockGasLimit": BigInt(9223372036854775807),
                      "sender": "0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38",
                      "fuzz": {
                        "runs": 20,
                        "maxTestRejects": 1000000
                      },
                      "rpcEndpoints": {
                        "arbitrum": "${ARBITRUM_RPC_URL}",
                        "arbitrum_sepolia": "https://arbitrum-sepolia.blockpi.network/v1/rpc/public",
                        "avalanche": "${AVALANCHE_RPC_URL}",
                        "base": "https://mainnet.base.org",
                        "base_sepolia": "https://sepolia.base.org",
                        "bnb": "https://bsc-dataseed.binance.org",
                        "gnosis": "https://rpc.gnosischain.com",
                        "localhost": "http://localhost:8545",
                        "mainnet": "${MAINNET_RPC_URL}",
                        "optimism": "${OPTIMISM_RPC_URL}",
                        "optimism_sepolia": "https://sepolia.optimism.io",
                        "polygon": "${POLYGON_RPC_URL}",
                        "scroll": "https://rpc.scroll.io/",
                        "sepolia": "${SEPOLIA_RPC_URL}"
                      }
                    }
                  };
                ignore: |
                  # unknown cheatcode with selector 0x6229498b
                  test/utils/BaseScript.t.sol

                  # Could not instantiate forked environment. Received invalid url.
                  test/fork/assets/USDC.t.sol
                  test/fork/assets/USDT.t.sol
                ref: c3ea8d7f7aab4cb33c6b4517ba38d32ca35b1257
              transmissions11/solmate:
                forge-version: v0.3.0
                hardhat-config: |
                  export default {
                    "paths": {
                      "sources": "src"
                    },
                    "solidity": {
                      "version": "0.8.15",
                      "remappings": [
                        "ds-test/=lib/ds-test/src/"
                      ],
                      "settings": {
                        "optimizer": {
                          "runs": 1000000
                        },
                        "metadata": {
                          "bytecodeHash": "none"
                        }
                      }
                    },
                    "solidityTest": {
                      "testFail": true
                    }
                  };
                ignore: |
                  # ERC20Test.invariantMetadata(): failed to set up invariant testing environment: No contracts to fuzz.
                  src/test/ERC20.t.sol

                  # ERC4626Test.invariantMetadata(): failed to set up invariant testing environment: No contracts to fuzz.
                  src/test/ERC4626.t.sol

                  # ERC721Test.invariantMetadata(): failed to set up invariant testing environment: No contracts to fuzz.
                  src/test/ERC721.t.sol
                ref: c93f7716c9909175d45f6ef80a34a650e2d24e56
            runners:
              ubuntu-latest: {}
              windows-latest: {}
              macos-latest: {}
            commands:
              forge build:
                pattern: 'Compiling (\d+) files with Solc \d+\.\d+'
                template: 'Compiled ${0} file(s)'
              forge test:
                pattern: 'Ran \d+ test suites in \d+\.\d+m?s \(\d+\.\d+m?s CPU time\): (\d+) tests passed, (\d+) failed, (\d+) skipped \((\d+) total tests\)'
                template: 'Ran ${3} tests (${0} passed, ${1} failed, ${2} skipped)'
              hardhat compile:
                pattern: 'Compiled (\d+) Solidity files with solc \d+\.\d+'
                template: 'Compiled ${0} file(s)'
              hardhat test solidity:
                pattern: 'Run (?:Failed|Passed): (\d+) tests, (\d+) passed, (\d+) failed, (\d+) skipped \(duration: \d+ ms\)'
                template: 'Ran ${0} tests (${1} passed, ${2} failed, ${3} skipped)'
    steps:
      - id: config
        env:
          REPOSITORY: ${{ matrix.repository }}
          RUNNER: ${{ matrix.runner }}
          COMMAND: ${{ matrix.command }}
          CONFIG: ${{ toJSON(matrix.config) }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const config = JSON.parse(process.env.CONFIG);
            const repositoryConfig = config.repositories[process.env.REPOSITORY];
            const runnerConfig = config.runners[process.env.RUNNER];
            const commandConfig = config.commands[process.env.COMMAND];
            if (!repositoryConfig) {
              core.setFailed(`Unsupported repository: ${process.env.REPOSITORY}`);
            }
            if (!runnerConfig) {
              core.setFailed(`Unsupported runner: ${process.env.RUNNER}`);
            }
            if (!commandConfig) {
              core.setFailed(`Unsupported command: ${process.env.COMMAND}`);
            }
            core.setOutput('repository', JSON.stringify(repositoryConfig));
            core.setOutput('runner', JSON.stringify(runnerConfig));
            core.setOutput('command', JSON.stringify(commandConfig));
            console.log({
              repository: repositoryConfig,
              runner: runnerConfig,
              command: commandConfig,
            })
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ matrix.repository }}
          ref: ${{ fromJSON(steps.config.outputs.repository).ref }}
      - name: Update the .gitignore
        if: fromJSON(steps.config.outputs.repository).ignore != ''
        env:
          IGNORE: ${{ fromJSON(steps.config.outputs.repository).ignore }}
        run: |
          echo "$IGNORE" >> .gitignore
          git rm --cached -r $(git ls-files -i -c --exclude-from=.gitignore)
          git clean -fdX
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Download Hardhat
        if: (startsWith(matrix.command, 'hardhat') && inputs.hardhat-ref != 'next' && !startsWith(inputs.hardhat-ref, '3'))
        uses: actions/download-artifact@v4
        with:
          name: hardhat
      - name: Fix Hardhat on Windows
        if: (startsWith(matrix.command, 'hardhat') && inputs.hardhat-ref != 'next' && !startsWith(inputs.hardhat-ref, '3')) && matrix.runner == 'windows-latest'
        run: |
          tar -xzf hardhat-*.tgz
          rm hardhat-*.tgz
          # The bundled esbuild is broken on Windows
          pushd package
          shopt -s globstar
          sed -i 's/workspace://' **/package.json
          jq 'del(.devDependencies)' package.json > package.json.tmp && mv package.json.tmp package.json
          npm install esbuild --force
          popd
          tar -czf hardhat-patched.tgz package
          rm -rf package
      - name: Install Hardhat from source
        if: (startsWith(matrix.command, 'hardhat') && inputs.hardhat-ref != 'next' && !startsWith(inputs.hardhat-ref, '3'))
        run: |
          npm install -g hardhat-*.tgz
          rm hardhat-*.tgz
      - name: Install Hardhat
        if: (startsWith(matrix.command, 'hardhat') && (inputs.hardhat-ref == 'next' || startsWith(inputs.hardhat-ref, '3')))
        run: |
          npm install -g hardhat@${{ inputs.hardhat-ref }}
          hardhat --version
      - name: Configure Hardhat
        if: startsWith(matrix.command, 'hardhat')
        env:
          CONFIG: ${{ fromJSON(steps.config.outputs.repository).hardhat-config }}
        run: |
          rm hardhat.config.* || true
          echo "$CONFIG" > hardhat.config.js
      - name: Initialize the package
        if: startsWith(matrix.command, 'hardhat')
        run: |
          npm init -y
          npm pkg set type="module"
      - name: Install dependencies (npm)
        if: hashFiles('package-lock.json') != ''
        run: npm ci
      - name: Install dependencies (pnpm)
        if: hashFiles('pnpm-lock.yaml') != ''
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile --prefer-offline || pnpm install
      - name: Install dependencies (yarn)
        if: hashFiles('yarn.lock') != ''
        run: |
          npm install -g yarn
          yarn install --immutable
      - name: Install dependencies (bun)
        if: hashFiles('bun.lockb') != ''
        run: |
          npm install -g bun
          bun install --frozen-lockfile
      - name: Install Forge
        if: startsWith(matrix.command, 'forge')
        uses: foundry-rs/foundry-toolchain@de808b1eea699e761c404bda44ba8f21aba30b2c
        with:
          version: ${{ fromJSON(steps.config.outputs.repository).forge-version }}
          cache: false
      - name: Run ${{ matrix.command }}
        id: run
        env:
          DEBUG: ${{ runner.debug && '*' || '' }}
          ENV_SOURCE: ${{ fromJSON(steps.config.outputs.repository).env }}
        run: |
          source <(echo "$ENV_SOURCE")
          set +e
          before=$(date +%s)
          ${{ matrix.command }} 2>&1 | tee -a run.output
          status=${PIPESTATUS[0]}
          after=$(date +%s)
          set -e
          echo '{"status": '"$status"', "time": '"$((after - before))"'}' > run.result
      - name: Run the command post-hook
        uses: actions/github-script@v7
        env:
          PATTERN: ${{ fromJSON(steps.config.outputs.command).pattern }}
          TEMPLATE: ${{ fromJSON(steps.config.outputs.command).template }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const output = fs.readFileSync('run.output').toString();
            const matches = output.matchAll(new RegExp(process.env.PATTERN, 'g'));
            const sums = [];
            for (const groups of matches) {
              for (let i = 1; i < groups.length; i++) {
                while (sums.length < i) {
                  sums.push(0);
                }
                sums[i - 1] += parseInt(groups[i]);
              }
            }
            let details = process.env.TEMPLATE;
            for (let i = 0; i < sums.length; i++) {
              details = details.replaceAll(`\${${i}}`, sums[i]);
            }
            fs.writeFileSync('run.details', details);
      - id: upload
        env:
          REPOSITORY: ${{ matrix.repository }}
          CONTEXT: |
            {
              "repository": "${{ matrix.repository }}",
              "runner": "${{ matrix.runner }}",
              "command": "${{ matrix.command }}"
            }
        run: |
          echo "repository=${REPOSITORY//\//_}" | tee -a $GITHUB_OUTPUT
          echo "$CONTEXT" > run.context
      - name: Upload the result
        uses: actions/upload-artifact@v4
        with:
          name: repository-${{ steps.upload.outputs.repository }};command-${{ matrix.command }};runner-${{ matrix.runner }}
          path: |
            run.context
            run.output
            run.result
            run.details
  summarize:
    name: Summarize the test results
    if: (!cancelled())
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Download the results
        uses: actions/download-artifact@v4
        with:
          pattern: 'repository-*;command-*;runner-*'
      - name: Summarize the results
        id: summary
        env:
          HARDHAT_REF: ${{ inputs.hardhat-ref }}
          EDR_REF: ${{ inputs.edr-ref }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const artifacts = fs.readdirSync(process.env.GITHUB_WORKSPACE);
            const results = [];
            for (const artifact of artifacts) {
              const context = JSON.parse(fs.readFileSync(path.join(artifact, 'run.context')).toString());
              const result = JSON.parse(fs.readFileSync(path.join(artifact, 'run.result')).toString());
              const details = fs.readFileSync(path.join(artifact, 'run.details')).toString();
              results.push({
                repository: context.repository,
                command: context.command,
                runner: context.runner,
                result: result.status,
                time: result.time,
                details,
              });
            }
            console.log(results);
            const header = ['Repository 📦', 'Command 👾', 'Runner 💨', 'Result 🧪', 'Wall-clock Time ⏰', 'Details 🔎'].map(data => ({data, header: true}));
            const rows = results.map(({repository, command, runner, result, time, details}) => ([
              repository,
              command,
              (() => {
                switch (runner) {
                  case 'ubuntu-latest':
                    return 'Ubuntu 🐧';
                  case 'macos-latest':
                    return 'macOS 🍎';
                  case 'windows-latest':
                    return 'Windows 🪟';
                }
              })(),
              (() => {
                switch (result) {
                  case 0:
                    return '✅ Passed';
                  case 1:
                    return '❌ Failed';
                  default:
                    return `⚠️ Unknown (${result})`;
                }
              })(),
              `${time} s`,
              details,
            ]));
            console.log(header);
            console.log(rows);
            await core.summary
              .addHeading('Test Results')
              .addTable([
                header,
                ...rows,
              ])
              .write()

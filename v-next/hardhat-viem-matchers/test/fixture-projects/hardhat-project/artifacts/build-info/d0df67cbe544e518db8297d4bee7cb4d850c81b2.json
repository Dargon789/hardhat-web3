{
  "_format": "hh3-sol-build-info-1",
  "id": "d0df67cbe544e518db8297d4bee7cb4d850c81b2",
  "solcVersion": "0.8.24",
  "solcLongVersion": "0.8.24+commit.e11b9ed9",
  "publicSourceNameMap": {
    "contracts/Events.sol": "contracts/Events.sol",
    "contracts/Revert.sol": "contracts/Revert.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "contracts/Events.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract Events {\n  struct Struct {\n    uint u;\n    uint v;\n  }\n\n  event WithoutArgs();\n  event WithUintArg(uint u);\n  event WithIntArg(int i);\n  event WithAddressArg(address a);\n  event WithTwoUintArgs(uint u, uint v);\n  event WithStringArg(string s);\n  event WithTwoStringArgs(string s, string t);\n  event WithIndexedStringArg(string indexed s);\n  event WithBytesArg(bytes b);\n  event WithIndexedBytesArg(bytes indexed b);\n  event WithBytes32Arg(bytes32 b);\n  event WithStructArg(Struct s);\n  event WithIndexedBytes32Arg(bytes32 indexed b);\n  event WithUintArray(uint[2] a);\n  event WithBytes32Array(bytes32[2] a);\n\n  constructor() {}\n\n  function doNotEmit() public {}\n\n  function emitWithoutArgs() public {\n    emit WithoutArgs();\n  }\n\n  function emitUint(uint u) public {\n    emit WithUintArg(u);\n  }\n\n  function emitInt(int i) public {\n    emit WithIntArg(i);\n  }\n\n  function emitAddress(address a) public {\n    emit WithAddressArg(a);\n  }\n\n  function emitUintTwice(uint u, uint v) public {\n    emit WithUintArg(u);\n    emit WithUintArg(v);\n  }\n\n  function emitTwoUints(uint u, uint v) public {\n    emit WithTwoUintArgs(u, v);\n  }\n\n  function emitString(string memory s) public {\n    emit WithStringArg(s);\n  }\n\n  function emitIndexedString(string memory s) public {\n    emit WithIndexedStringArg(s);\n  }\n\n  function emitBytes(bytes memory b) public {\n    emit WithBytesArg(b);\n  }\n\n  function emitIndexedBytes(bytes memory b) public {\n    emit WithIndexedBytesArg(b);\n  }\n\n  function emitBytes32(bytes32 b) public {\n    emit WithBytes32Arg(b);\n  }\n\n  function emitIndexedBytes32(bytes32 b) public {\n    emit WithIndexedBytes32Arg(b);\n  }\n\n  function emitUintAndString(uint u, string memory s) public {\n    emit WithStringArg(s);\n    emit WithUintArg(u);\n  }\n\n  function emitTwoUintsAndTwoStrings(\n    uint u,\n    uint v,\n    string memory s,\n    string memory t\n  ) public {\n    emit WithTwoUintArgs(u, v);\n    emit WithTwoStringArgs(s, t);\n  }\n\n  function emitStruct(uint u, uint v) public {\n    emit WithStructArg(Struct(u, v));\n  }\n\n  function emitUintArray(uint u, uint v) public {\n    emit WithUintArray([u, v]);\n  }\n\n  function emitBytes32Array(bytes32 b, bytes32 c) public {\n    emit WithBytes32Array([b, c]);\n  }\n\n  function emitNestedUintFromSameContract(uint u) public {\n    emitUint(u);\n  }\n}\n\ncontract AnotherContract {\n  event WithUintArg(uint u);\n\n  function emitUint(uint u) public {\n    emit WithUintArg(u);\n  }\n}\n\ncontract OverrideEventContract {\n  event simpleEvent(uint u);\n  event simpleEvent();\n\n  function emitSimpleEventWithUintArg(uint u) public {\n    emit simpleEvent(u);\n  }\n\n  function emitSimpleEventWithoutArg() public {\n    emit simpleEvent();\n  }\n}\n"
      },
      "contracts/Revert.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract Revert {\n  function alwaysRevert() external pure {\n    revert(\"Intentional revert for testing purposes\");\n  }\n\n  function doNotRevert() external pure {}\n}\n"
      }
    }
  }
}